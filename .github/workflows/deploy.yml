name: Deploy Multi-Environment

on:
  push:
    branches:
      - develop
      - main

jobs:
  deploy-dev:
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    concurrency:
      group: ${{ github.repository }}-deploy-dev
      cancel-in-progress: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configurar .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "9.0.x"

      - name: Install SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Build project
        run: dotnet build --no-incremental

      - name: Run tests with coverage
        run: |
          dotnet test Auth.Tests/Auth.Tests.csproj \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            /p:CoverletOutput=./TestResults/coverage/ \
            /p:CoverletOutputFormat=cobertura \
            --logger "trx;LogFileName=test-execution.xml"

      - name: Encontrar caminho exato do Cobertura
        id: cobertura
        run: |
          COVERAGE_FILE=$(find ./TestResults -name 'coverage.cobertura.xml' | head -n 1)
          echo "COVERAGE_FILE=$COVERAGE_FILE" >> $GITHUB_ENV
          echo "coverage path: $COVERAGE_FILE"

      - name: Begin Sonar Analysis
        run: |
          dotnet sonarscanner begin \
            /k:"auth-api-core" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="${{ secrets.SONAR_ENDPOINT }}" \
            /d:sonar.exclusions="**/Migrations/**" \
            /d:sonar.coverage.exclusions="**Test*.cs" \
            /d:sonar.cs.coveragePlugin=cobertura \
            /d:sonar.coverageReportPaths="./TestResults/coverage/coverage.cobertura.xml"

      - name: List coverage files
        run: find . -name "coverage.opencover.xml"

      - name: Verificar arquivos em TestResults
        run: find . -name "test-execution.xml"

      - name: Build
        run: dotnet build

      - name: End Sonar Analysis
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: SSH Deploy DEV
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_DEV_HOST }}
          username: ${{ secrets.VPS_DEV_USER }}
          key: ${{ secrets.VPS_DEV_SSH_KEY }}
          script: |
            set -e
            cd deploy/dev/

            cd ./auth-api-core
            git fetch origin && git checkout develop && git pull

            cd ../infra
            git fetch origin && git checkout develop && git pull

            cd ./APIs
            docker compose stop auth-api-dev || true
            docker compose rm -f auth-api-dev || true
            docker rmi apis-auth-api-dev:latest || true

            docker compose build auth-api-dev

            if docker compose up -d auth-api-dev; then
              echo "Deploy DEV com sucesso! Salvando imagem de backup..."
              docker tag apis-auth-api-dev:latest apis-auth-api-dev-backup:latest
            else
              echo "Erro no deploy DEV. Rollback iniciado..."
              docker compose stop auth-api-dev || true
              docker compose rm -f auth-api-dev || true
              docker tag apis-auth-api-dev-backup:latest apis-auth-api-dev:latest
              docker run -d --name auth-api-dev apis-auth-api-dev:latest
              echo "Rollback DEV conclu√≠do."
              exit 1
            fi
          debug: true
